## Secret Santa List Generator
## Phil Grace November 2018

# SecretSanta.py parses the file config.yaml and generates a Secret Santa list
# according to the rules set by the user.

# THIS IS AN EXAMPLE FILE. TO USE THIS PROGRAM, COPY THIS FILE TO config.yaml
# AND EDIT AS NEEDED.


## Rules: set rules for generating the list.
# 
#   - IncludeHistory (yes, no)
#        Does it matter who a person previously gave to?
#    
#   - GrandfatherPeriod (integer)
#        So that we don't run out of combinations, history needs to matter less and
#        less as time goes on. This variable chooses how many years until history
#        is forgotten (5 is a good number, but will vary according to number of
#        people involved).
#    
#   - PartnerToPartner (yes, no)
#        Can a person be paired with their partner?
#    
#   - Triangles (yes, no)
#        Can a person receive a gift from one person, and then give a gift to that
#        person's partner?
# 
#   - CoupleToCouple (yes, no)
#        Can two couples be matched up with each other?

Rules:
  IncludeHistory: yes
  GrandfatherPeriod: 5
  PartnerToPartner: no
  Triangles: no
  CoupleToCouple: no

## Output: set how the output should be formatted and saved.
#
#   - PrintingOrder (GivingOrder, FamilyOrder, AlphabeticalOrder)
#        How should the list be printed? If Jamie > Sam > Alex > Charlie in age
#        (and they are listed in this order in config.yaml), then
#        GivingOrder would print:
#            Alex → Jamie
#            Jamie → Sam
#            Sam → Charlie
#            Charlie → Alex
#        FamilyOrder would print:
#            Jamie → Sam
#            Sam → Charlie
#            Alex → Jamie
#            Charlie → Alex
#        AlphabeticalOrder would print:
#            Alex → Jamie
#            Charlie → Alex
#            Jamie → Sam
#            Sam → Charlie
#
#   - PrintToScreen (yes, no)
#        Should the list be printed to the screen?
#
#   - WriteToFile (yes, no)
#        Should the list be written to a file?
#
#   - Append (yes, no)
#        Should we append the list of names to the file of lists, or overwrite and
#        replace with the new list?

Output:
  PrintingOrder: AlphabeticalOrder
  PrintToScreen: yes
  WriteToFile: no
  Append: yes


## Names: define the names and relationships of the people.
# 
#     Syntax is simple: just a person's name, their partner (which can be left
#     blank or entirely omitted), and their history written in the form:
#         History:
#           - Charlie
#           - Alex
#           - Jamie
#     where the person had Charlie last year, Alex the year before that, and Jamie
#     the year before that. If someone wasn't involved in a particular year,
#     leave that year as a blank entry (but still put the dash there), e.g.
#         History:
#           - Charlie
#           - 
#           - Jamie

Names:
  Jamie:
    Partner: Charlie
    History:
      - Sam
      - 

  Sam:
    Partner:
    History:
      - Charlie

  Alex:
    Partner: 
    History:
      - Jamie

  Charlie:
    Partner: Jamie
    History:
      - Alex
